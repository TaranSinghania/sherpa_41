language: cpp

dist: trusty

env:
  global:
  # COVERITY_SCAN_TOKEN
  - secure: "Md9S9t94zyokHlfDVajplngTqGt2ev/EtgSDN7s+VUo6te59pughWUuSeK/9Zo7PcgdK8NtkBHpsFk3Ut13D8Tg4nin2bW71d7YAweYg7+zJVii25ke3ZAuSCZQqN9npAlpekX/2YTGh6PbIlqnuBes/SQSdwo6mWJRM5Qhef6xNZ4sAeaDEnr6wjalAX0WnYPWiQIwrGDHIj5A4Y1KQEScSGDZBRxwfbzZ11SHj+imqUXa9h8y7vQMomNgzFvn3YPUgduCmSFd6kYEqhhQddGpTksEO0GT9RF1msWIWvm7em95n+6jhp8B7XIdVwILgVcHIHo2PSCzA7ELxdeWFa6TYkwmZangC+tPmPEXKFsl4FyY8FPkailSNHltqTFGW/kmdmxaKs/1ooGeTfgYAmP/vwTY4DDXeE1kgfajIW8cL3ctyqaSikhpmXakJTLpmJjfmvtKIVIyIceKqPPUWF3GGWC61pFHqGlPPCNBZl2nKHQOKag1kK2Iy7Ahs3mI0RhPRPSdFmNN8i2D2yJFhXbfoBulv2JPBSwDfGgM5hEgyzGFXcv+FSsPJCTgmqdZt2S1H45DUJNVQqkaLffPLOF9MDTczceKz2keI938MqrN0gcIXBWl1z6Om69ei9Yw9W6uemSeprgdhjcP+fZTT1TmqaMHwCunY19Wfpg58ZqU="

matrix:
  fast_finish: true

  include:

    # Clang Format

    - name: "Clang Format"
      os: linux
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-7']
          packages: ['clang-format-7']
      script:
        - |
          diff -u <(find src include tests -name '*.cpp' -o -name '*.hpp' -type f -exec cat {} +) \
                  <(find src include tests -name '*.cpp' -o -name '*.hpp' -type f -exec clang-format-7 {} +)

    # Clang Sanitizer

    - name: "Clang Sanitizer"
      os: linux
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-7']
          packages: ['clang-7', 'libstdc++-7-dev']
      env:
        - MATRIX_EVAL="CC=clang-7 && CXX=clang++-7 && CMAKE_OPTIONS=-DSANITIZER=ON"

    # Clang Tidy

    - name: "Clang Tidy"
      os: linux
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-7']
          packages: ['clang-7', 'libstdc++-7-dev', 'clang-tidy-7']
      script:
        - clang-tidy-7 $(find src -not -name "main.cpp" -type f) -p . -- -Iinclude/ -std=c++17

    # Coverage

    - name: "Coverage (Coveralls)"
      os: linux
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['gcc-7', 'g++-7']
      before_script:
        - pip install --user cpp-coveralls
      after_success:
        - coveralls --root . -e tests -e lib -E ".*CMakeFiles.*"
      env:
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7 && CMAKE_OPTIONS=-DCOVERAGE=ON"

    # Coverity Scan

    - name: "Coverity Scan"
      os: linux
      compiler: gcc
      before_install:
        - echo -n | openssl s_client -connect https://scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['gcc-7', 'g++-7', 'libstdc++-7-dev']
        coverity_scan:
          project:
            name: "ayazhafiz/sherpa_41"
            description: "A well-architectured, trivial browser engine"
          notification_email: ayaz.hafiz.1@gmail.com
          build_command_prepend: "cov-configure --comptype gcc --compiler g++-7 --template && CC=gcc-7 CXX=g++-7 cmake -DEXECUTABLE=OFF ."
          build_command: "cmake --build ."
          branch_pattern: coverity_scan
      env: COVERITY_SCAN_BUILD=true
      if: branch = coverity_scan
      before_script: echo "Coverity Scan"
      script: echo "Coverity build log:" && cat cov-int/build-log.txt

    # Linux: clang

    - name: "Linux: clang 5"
      os: linux
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-5.0']
          packages: ['clang-5.0', 'libstdc++-7-dev']
      env:
        - MATRIX_EVAL="CC=clang-5.0 && CXX=clang++-5.0"

    - name: "Linux: clang 6"
      os: linux
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-6.0']
          packages: ['clang-6.0', 'libstdc++-7-dev']
      env:
        - MATRIX_EVAL="CC=clang-6.0 && CXX=clang++-6.0"

    - name: "Linux: clang 7"
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-7']
          packages: ['clang-7', 'libstdc++-7-dev']
      env:
        - MATRIX_EVAL="CC=clang-7 && CXX=clang++-7"

    # Linux: gcc

    - name: "Linux: gcc 7"
      os: linux
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['gcc-7', 'g++-7']
      env:
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"

    - name: "Linux: gcc 8"
      os: linux
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['gcc-8', 'g++-8']
      env:
        - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8"

    # macOS: clang

    - name: "macOS: xcode 9"
      os: osx
      osx_image: xcode9

    - name: "macOS: xcode 9.1"
      os: osx
      osx_image: xcode9.1

    - name: "macOS: xcode 9.2"
      os: osx
      osx_image: xcode9.2

    - name: "macOS: xcode 9.3"
      os: osx
      osx_image: xcode9.3

    - name: "macOS: xcode 9.4"
      os: osx
      osx_image: xcode9.4

    - name: "macOS: xcode 10"
      os: osx
      osx_image: xcode10

    - name: "macOS: xcode 10.1"
      os: osx
      osx_image: xcode10.1

    # macOS: gcc

    - name: "macOS: gcc 7"
      os: osx
      osx_image: xcode10
      env:
        - MATRIX_EVAL="brew install gcc@7 && CC=gcc-7 && CXX=g++-7"

    - name: "macOS: gcc 8"
      os: osx
      osx_image: xcode10
      env:
        - MATRIX_EVAL="brew install gcc@8 && CC=gcc-8 && CXX=g++-8"

  allow_failures:
    - env: COVERITY_SCAN_BUILD=true

before_install:
  - eval "${MATRIX_EVAL}"

script:
  - cmake "$CMAKE_OPTIONS" -DEXECUTABLE=OFF .
  - cmake --build .
  - ./sherpa_41-test